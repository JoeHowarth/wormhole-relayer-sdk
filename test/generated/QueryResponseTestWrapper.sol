// SPDX-License-Identifier: Apache 2
pragma solidity ^0.8.24;

import "wormhole-sdk/libraries/QueryResponse.sol";

// This file was auto-generated by wormhole-solidity-sdk gen/libraryTestWrapper.ts

contract QueryTypeTestWrapper {
  function min() external pure returns (uint8) {
    return QueryType.min();
  }

  function max() external pure returns (uint8) {
    return QueryType.max();
  }

  function checkValid(uint8 queryType) external pure {
    QueryType.checkValid(queryType);
  }

  function isValid(uint8 queryType) external pure returns (bool) {
    return QueryType.isValid(queryType);
  }
}

contract QueryResponseLibTestWrapper {
  function calcPrefixedResponseHash(bytes calldata response) external pure returns (bytes32) {
    return QueryResponseLib.calcPrefixedResponseHash(response);
  }

  function parseAndVerifyQueryResponse(
    address wormhole,
    bytes calldata response,
    IWormhole.Signature[] calldata signatures
  ) external view returns (QueryResponse memory ret) {
    return QueryResponseLib.parseAndVerifyQueryResponse(wormhole, response, signatures);
  }

  function verifyQueryResponse(
    address wormhole,
    bytes calldata response,
    IWormhole.Signature[] calldata signatures
  ) external view {
    QueryResponseLib.verifyQueryResponse(wormhole, response, signatures);
  }

  function verifyQueryResponse(
    address wormhole,
    bytes32 prefixedResponseHash,
    IWormhole.Signature[] calldata signatures
  ) external view {
    QueryResponseLib.verifyQueryResponse(wormhole, prefixedResponseHash, signatures);
  }

  function parseQueryResponse(bytes calldata response) external pure returns (QueryResponse memory ret) {
    return QueryResponseLib.parseQueryResponse(response);
  }

  function parseEthCallQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (EthCallQueryResponse memory ret) {
    return QueryResponseLib.parseEthCallQueryResponse(pcr);
  }

  function parseEthCallByTimestampQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (EthCallByTimestampQueryResponse memory ret) {
    return QueryResponseLib.parseEthCallByTimestampQueryResponse(pcr);
  }

  function parseEthCallWithFinalityQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (EthCallWithFinalityQueryResponse memory ret) {
    return QueryResponseLib.parseEthCallWithFinalityQueryResponse(pcr);
  }

  function parseSolanaAccountQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (SolanaAccountQueryResponse memory ret) {
    return QueryResponseLib.parseSolanaAccountQueryResponse(pcr);
  }

  function parseSolanaPdaQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (SolanaPdaQueryResponse memory ret) {
    return QueryResponseLib.parseSolanaPdaQueryResponse(pcr);
  }

  function validateBlockTime(uint64 blockTimeInMicroSeconds, uint256 minBlockTimeInSeconds) external pure {
    QueryResponseLib.validateBlockTime(blockTimeInMicroSeconds, minBlockTimeInSeconds);
  }

  function validateBlockNum(uint64 blockNum, uint256 minBlockNum) external pure {
    QueryResponseLib.validateBlockNum(blockNum, minBlockNum);
  }

  function validateChainId(uint16 chainId, uint16[] calldata validChainIds) external pure {
    QueryResponseLib.validateChainId(chainId, validChainIds);
  }

  function validateEthCallRecord(
    EthCallRecord[] calldata ecrs,
    address[] calldata validContractAddresses,
    bytes4[] calldata validFunctionSignatures
  ) external pure {
    QueryResponseLib.validateEthCallRecord(ecrs, validContractAddresses, validFunctionSignatures);
  }

  function validateEthCallRecord(
    EthCallRecord calldata ecd,
    address[] calldata validContractAddresses,
    bytes4[] calldata validFunctionSignatures
  ) external pure {
    QueryResponseLib.validateEthCallRecord(ecd, validContractAddresses, validFunctionSignatures);
  }
}
